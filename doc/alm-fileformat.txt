Alithia Model (ALM) File Format
-------------------------------

1. Description of the models
  An ALM file contains a single model. Animation currently is based on morphing,
  like in Quake 2 MD2 files, but with floating point numbers for greater
  precision. The model is saved as a set of arrays of vertices followed by a
  single array of faces. The number of vertex arrays is the number of animation
  frames. The faces are stored as indices in the vertex array and all vertex
  arrays must keep the same index.
  
  There is no playback order for animations and no texture information. The
  engine loader requires explicit mention of the texture name and the animation
  frame order must be specified manually in code. Therefore the model file must
  contain all animations flattened in a single sequence.
  
2. File layout
  All integer values are in little endian order. All values are 32 bit.
  The file begins with a header, followed by one or more vertex arrays and ends
  with a face array.
  
  Header:
  4 bytes   for the 'ALM1' string
  1 uint    for the flags (currently 0)
  1 uint    for the vertex count in each vertex array
  1 uint    for the face count in the faces array
  1 uint    for the frame count (vertex array count)
  
  Vertex array (for each vertex * vertex count):
  3 floats  for the x,y,z vertex coordinates
  3 floats  for the x,y,z normal coordinates
  2 floats  for the u,v (or s,t) texture coordinates
  
  (there are "frame count" arrays in the file)
  
  Face array (for each face * face count):
  3 uint16  for the first, second and third vertex of the face (faces are always
            triangular). The indices are stored as 16bit values, not 32bit.

3. Source code
  Check the mdl_load function in model.c. At about 50 lines of C code is very
  easy to understand.

